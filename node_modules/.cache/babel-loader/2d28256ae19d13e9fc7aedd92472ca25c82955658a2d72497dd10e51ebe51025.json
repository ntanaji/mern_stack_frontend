{"ast":null,"code":"export const restHelper = () => {\n  const callAPI = async (endpointurl, options = {}) => {\n    const defaultHTTPMethod = \"GET\";\n    const defaultHTTPHeaders = {\n      //set defaultHeaders of Http request\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    };\n    const controller = new AbortController(); //using  AbortController to cancel ongoing fetch requests\n    options.signal = controller.signal;\n    options.method = options.method || defaultHTTPMethod;\n    options.headers = options.headers ? {\n      ...defaultHTTPHeaders,\n      ...options.headers\n    } : defaultHTTPHeaders;\n    options.body = JSON.stringify(options.body) || false;\n    if (!options.body) delete options.body;\n    setTimeout(() => {\n      // cancel request if it will take more then 5s \n      controller.abort();\n    }, 5000);\n    try {\n      const apiResponse = await fetch(endpointurl, options);\n      return await apiResponse.json();\n    } catch (err) {\n      return err;\n    }\n  };\n\n  //calling get API For fetching data\n  const get = (endpointurl, options = {}) => callAPI(endpointurl, options);\n\n  //Post to insert \n  const postCreate = (endpointurl, options) => {\n    options.method = \"POST\";\n    return callAPI(endpointurl, options);\n  };\n\n  //Put Api calling\n  const putUpdate = (endpointurl, options) => {\n    options.method = \"PUT\";\n    return callAPI(endpointurl, options);\n  };\n\n  //Delete Api calling\n  const deletedata = (endpointurl, options) => {\n    options.method = \"DELETE\";\n    return callAPI(endpointurl, options);\n  };\n  return {\n    get,\n    postCreate,\n    putUpdate,\n    deletedata\n  };\n};","map":{"version":3,"names":["restHelper","callAPI","endpointurl","options","defaultHTTPMethod","defaultHTTPHeaders","Accept","controller","AbortController","signal","method","headers","body","JSON","stringify","setTimeout","abort","apiResponse","fetch","json","err","get","postCreate","putUpdate","deletedata"],"sources":["D:/NodeJs-Poc/react-mern-stack-crud/src/httphelpers/resthelper.js"],"sourcesContent":["export const restHelper = () => {\r\n\r\n    const callAPI = async (endpointurl, options = {}) => {\r\n        const defaultHTTPMethod = \"GET\"\r\n        const defaultHTTPHeaders = {  //set defaultHeaders of Http request\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        }\r\n        const controller = new AbortController() //using  AbortController to cancel ongoing fetch requests\r\n        options.signal = controller.signal\r\n\r\n        options.method = options.method || defaultHTTPMethod\r\n\r\n        options.headers = options.headers\r\n            ? { ...defaultHTTPHeaders, ...options.headers }\r\n            : defaultHTTPHeaders\r\n\r\n        options.body = JSON.stringify(options.body) || false\r\n        if (!options.body) delete options.body\r\n\r\n        setTimeout(() => { // cancel request if it will take more then 5s \r\n            controller.abort()\r\n        }, 5000)\r\n\r\n        try {\r\n            const apiResponse = await fetch(endpointurl, options)\r\n            return await apiResponse.json()\r\n        } catch (err) {\r\n            return err\r\n        }\r\n    }\r\n\r\n    //calling get API For fetching data\r\n    const get = (endpointurl, options = {}) => callAPI(endpointurl, options)\r\n\r\n    //Post to insert \r\n    const postCreate = (endpointurl, options) => {\r\n        options.method = \"POST\"\r\n        return callAPI(endpointurl, options)\r\n    }\r\n\r\n\r\n    //Put Api calling\r\n    const putUpdate = (endpointurl, options) => {\r\n        options.method = \"PUT\"\r\n        return callAPI(endpointurl, options)\r\n    }\r\n\r\n    //Delete Api calling\r\n    const deletedata = (endpointurl, options) => {\r\n        options.method = \"DELETE\"\r\n        return callAPI(endpointurl, options)\r\n    }\r\n\r\n    return {\r\n        get,\r\n        postCreate,\r\n        putUpdate,\r\n        deletedata,\r\n    }\r\n}"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAGA,CAAA,KAAM;EAE5B,MAAMC,OAAO,GAAG,MAAAA,CAAOC,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IACjD,MAAMC,iBAAiB,GAAG,KAAK;IAC/B,MAAMC,kBAAkB,GAAG;MAAG;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,MAAM,EAAE;IACZ,CAAC;IACD,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC,EAAC;IACzCL,OAAO,CAACM,MAAM,GAAGF,UAAU,CAACE,MAAM;IAElCN,OAAO,CAACO,MAAM,GAAGP,OAAO,CAACO,MAAM,IAAIN,iBAAiB;IAEpDD,OAAO,CAACQ,OAAO,GAAGR,OAAO,CAACQ,OAAO,GAC3B;MAAE,GAAGN,kBAAkB;MAAE,GAAGF,OAAO,CAACQ;IAAQ,CAAC,GAC7CN,kBAAkB;IAExBF,OAAO,CAACS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAACS,IAAI,CAAC,IAAI,KAAK;IACpD,IAAI,CAACT,OAAO,CAACS,IAAI,EAAE,OAAOT,OAAO,CAACS,IAAI;IAEtCG,UAAU,CAAC,MAAM;MAAE;MACfR,UAAU,CAACS,KAAK,CAAC,CAAC;IACtB,CAAC,EAAE,IAAI,CAAC;IAER,IAAI;MACA,MAAMC,WAAW,GAAG,MAAMC,KAAK,CAAChB,WAAW,EAAEC,OAAO,CAAC;MACrD,OAAO,MAAMc,WAAW,CAACE,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV,OAAOA,GAAG;IACd;EACJ,CAAC;;EAED;EACA,MAAMC,GAAG,GAAGA,CAACnB,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAKF,OAAO,CAACC,WAAW,EAAEC,OAAO,CAAC;;EAExE;EACA,MAAMmB,UAAU,GAAGA,CAACpB,WAAW,EAAEC,OAAO,KAAK;IACzCA,OAAO,CAACO,MAAM,GAAG,MAAM;IACvB,OAAOT,OAAO,CAACC,WAAW,EAAEC,OAAO,CAAC;EACxC,CAAC;;EAGD;EACA,MAAMoB,SAAS,GAAGA,CAACrB,WAAW,EAAEC,OAAO,KAAK;IACxCA,OAAO,CAACO,MAAM,GAAG,KAAK;IACtB,OAAOT,OAAO,CAACC,WAAW,EAAEC,OAAO,CAAC;EACxC,CAAC;;EAED;EACA,MAAMqB,UAAU,GAAGA,CAACtB,WAAW,EAAEC,OAAO,KAAK;IACzCA,OAAO,CAACO,MAAM,GAAG,QAAQ;IACzB,OAAOT,OAAO,CAACC,WAAW,EAAEC,OAAO,CAAC;EACxC,CAAC;EAED,OAAO;IACHkB,GAAG;IACHC,UAAU;IACVC,SAAS;IACTC;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}